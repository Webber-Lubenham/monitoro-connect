
import { supabase } from "@/integrations/supabase/client";
import { LogEntry } from "@/types/database.types";

export type LogLevel = 'info' | 'warning' | 'error' | 'debug';

export interface LogOptions {
  metadata?: Record<string, any>;
  persist?: boolean;
  toast?: boolean;
}

export const defaultLogOptions: LogOptions = {
  persist: true,
  toast: false
};

/**
 * Log a message with a specific level
 */
export const log = async (
  message: string,
  level: LogLevel = 'info',
  options: LogOptions = defaultLogOptions
) => {
  const timestamp = new Date().toISOString();
  
  // Always log to console
  switch (level) {
    case 'error':
      console.error(`[${timestamp}] ERROR: ${message}`, options.metadata);
      break;
    case 'warning':
      console.warn(`[${timestamp}] WARNING: ${message}`, options.metadata);
      break;
    case 'debug':
      console.debug(`[${timestamp}] DEBUG: ${message}`, options.metadata);
      break;
    case 'info':
    default:
      console.log(`[${timestamp}] INFO: ${message}`, options.metadata);
      break;
  }
  
  // Persist to database if requested
  if (options.persist) {
    await persistLog(message, level, timestamp, options.metadata);
  }
  
  // Show toast if requested
  if (options.toast) {
    // Implementation depends on toast library
    // Implement if needed
  }
};

/**
 * Persist a log entry to the database
 */
const persistLog = async (
  message: string,
  level: LogLevel,
  timestamp: string,
  metadata?: Record<string, any>
) => {
  try {
    // Create a proper LogEntry object with UUID generated by the database
    const logEntry: Omit<LogEntry, 'id'> = {
      message,
      level,
      timestamp,
      metadata
    };
    
    const { error } = await supabase.from('logs').insert(logEntry);
    
    if (error) {
      console.error('Failed to persist log:', error);
    }
  } catch (err) {
    console.error('Error persisting log:', err);
  }
};

// Convenience methods
export const logInfo = (message: string, options?: LogOptions) => log(message, 'info', options);
export const logWarning = (message: string, options?: LogOptions) => log(message, 'warning', options);
export const logError = (message: string, options?: LogOptions) => log(message, 'error', options);
export const logDebug = (message: string, options?: LogOptions) => log(message, 'debug', options);
